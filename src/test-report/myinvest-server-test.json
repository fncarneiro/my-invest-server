{
  "stats": {
    "suites": 5,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-11T20:48:56.133Z",
    "end": "2021-02-11T20:48:56.931Z",
    "duration": 798,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df0d0c6c-1040-49ed-bfdd-28821edf9fd7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0e47d1eb-26f8-433a-8719-376fd38e1f3b",
          "title": "Init",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\init.js",
          "file": "\\test\\init.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check app status",
              "fullTitle": "Init check app status",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server).get('/').end((err, res) => { \n  expect(err).to.not.exist; \n  expect(res.status).to.equal(200); \n  done(); \n})",
              "err": {},
              "uuid": "ba5bedfa-899c-496f-9d6c-900beb49b386",
              "parentUUID": "0e47d1eb-26f8-433a-8719-376fd38e1f3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba5bedfa-899c-496f-9d6c-900beb49b386"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
          "title": "Investments Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\investments.js",
          "file": "\\test\\investments.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Investments Route\"",
              "fullTitle": "Investments Route \"before all\" hook in \"Investments Route\"",
              "timedOut": false,
              "duration": 87,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "e47fe223-6beb-45e3-9ade-56d8e1bc7b24",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check Inserting a investment with future period.",
              "fullTitle": "Investments Route Check Inserting a investment with future period.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodTomorrow\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(400);\n        expect(res.body).to.be.a('object');\n        expect(res.body.errors[0]).to.have.property('msg', 'Period must be iqual or less today.');                \n        done();\n    })",
              "err": {},
              "uuid": "0326bdbf-e4b5-4afb-9901-169eea19679e",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Insert a investment.",
              "fullTitle": "Investments Route Insert a investment.",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment created.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday);\n        done();\n    })",
              "err": {},
              "uuid": "d107a69f-492c-42ed-a1fd-1213567621cd",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check inserting a investment with duplicated period.",
              "fullTitle": "Investments Route Check inserting a investment with duplicated period.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Period already exists.');  \n        expect(res.body).to.have.property('period').to.eql(periodToday);              \n        done();\n    })",
              "err": {},
              "uuid": "02c26034-c9e7-4365-9223-83a8d81c1b45",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all investments.",
              "fullTitle": "Investments Route Get all investments.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/investments')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investments').to.have.lengthOf(1);\n        expect(res.body.investments[0]).to.have.property('id_investment');\n        expect(res.body.investments[0]).to.have.property('period'); \n        id_investment = res.body.investments[0].id_investment;\n        done();\n    })",
              "err": {},
              "uuid": "1016179e-5ada-4c03-87e5-50fc8e19de1c",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one investment.",
              "fullTitle": "Investments Route Get one investment.",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday+'T03:00:00.000Z');                \n        done();\n    })",
              "err": {},
              "uuid": "86ff3320-0ecf-49f8-989f-7d61ea65f4f1",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a investment.",
              "fullTitle": "Investments Route Update a investment.",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .put(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ period: periodYesterday })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment updated.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodYesterday);\n        done();\n    })",
              "err": {},
              "uuid": "ebec4edf-0f36-4809-8ac9-0a37d745011e",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a investment.",
              "fullTitle": "Investments Route Delete a investment.",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)            \n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment deleted.');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);                 \n        done();\n    })",
              "err": {},
              "uuid": "a26b2646-86a1-4909-b8b5-00fe01279f5e",
              "parentUUID": "ddcfbdb4-e33d-4c25-addb-05429cb789a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0326bdbf-e4b5-4afb-9901-169eea19679e",
            "d107a69f-492c-42ed-a1fd-1213567621cd",
            "02c26034-c9e7-4365-9223-83a8d81c1b45",
            "1016179e-5ada-4c03-87e5-50fc8e19de1c",
            "86ff3320-0ecf-49f8-989f-7d61ea65f4f1",
            "ebec4edf-0f36-4809-8ac9-0a37d745011e",
            "a26b2646-86a1-4909-b8b5-00fe01279f5e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 80,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "fdf8f28b-7c45-4d36-a8df-a7b4c4f9eb0c",
          "title": "Login Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\login.js",
          "file": "\\test\\login.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check login without parameter.",
              "fullTitle": "Login Route Check login without parameter.",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send({})\n    .end((err, res) => {\n        const bodyMsgs = res.body.errors.map((obj) => obj.msg);\n        const msgs = ['Email is required.',\n            'Invalid Email format (email@domain.com).',\n            'Password is required.',\n            'Password must have min 8 characters.'];\n        expect(res.status).to.equal(400);\n        expect(res.body).to.be.a('object');\n        expect(res.body.errors).to.have.lengthOf(4);\n        bodyMsgs.map((element, index) => {\n            expect(element).to.equal(`${msgs[index]}`);\n        });\n        done();\n    })",
              "err": {},
              "uuid": "b870ef0a-1146-441d-872d-bc01a0ddf429",
              "parentUUID": "fdf8f28b-7c45-4d36-a8df-a7b4c4f9eb0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check login with wrong password.",
              "fullTitle": "Login Route Check login with wrong password.",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send({\n        email: defaultUser.email,\n        password: faker.internet.password(8)\n    })\n    .end((err, res) => {\n        expect(res.status).to.equal(401);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Authentication failed.');\n        done();\n    })",
              "err": {},
              "uuid": "5d8ccf6d-17d5-45a9-b2f6-0631df9e1659",
              "parentUUID": "fdf8f28b-7c45-4d36-a8df-a7b4c4f9eb0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check success login.",
              "fullTitle": "Login Route Check success login.",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send( defaultUser )\n    .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(err).not.exist;\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Authentication success.');\n        expect(res.body).to.have.property('token');\n        done();\n    })",
              "err": {},
              "uuid": "7e58c63a-6abf-450e-beff-1ce0fff95d0d",
              "parentUUID": "fdf8f28b-7c45-4d36-a8df-a7b4c4f9eb0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b870ef0a-1146-441d-872d-bc01a0ddf429",
            "5d8ccf6d-17d5-45a9-b2f6-0631df9e1659",
            "7e58c63a-6abf-450e-beff-1ce0fff95d0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
          "title": "Stocks Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\stocks.js",
          "file": "\\test\\stocks.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stocks Route\"",
              "fullTitle": "Stocks Route \"before all\" hook in \"Stocks Route\"",
              "timedOut": false,
              "duration": 61,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "0b2f6f1e-bb3a-4acd-a4c5-fa9d0475f552",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Stocks Route\"",
              "fullTitle": "Stocks Route \"before all\" hook in \"Stocks Route\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        defaultStock.id_investment = res.body.investment.id_investment;\n        done();\n    });",
              "err": {},
              "uuid": "b8b83a0a-375b-483b-a6b2-dff9649613da",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Stocks Route\"",
              "fullTitle": "Stocks Route \"after all\" hook in \"Stocks Route\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete(`/investments/${defaultStock.id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        done();\n    })",
              "err": {},
              "uuid": "003caa5e-613a-4473-b14c-6a5ddc810592",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Insert a Stock.",
              "fullTitle": "Stocks Route Insert a Stock.",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/stocks/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send(defaultStock)\n    .end((err, res) => {                \n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Stock created.');                \n        expect(res.body.stock).to.have.property('id_stock').to.eql(res.body.stock.id_stock);\n        done();\n    })",
              "err": {},
              "uuid": "2ac70496-310b-4176-a4d8-360633091c33",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check inserting a Stock with not found investment.",
              "fullTitle": "Stocks Route Check inserting a Stock with not found investment.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let wrongStock = {...defaultStock};\nwrongStock.id_investment = 0;  \nchai\n    .request(server)\n    .post('/stocks/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send( wrongStock )\n    .end((err, res) => {                \n        expect(err).not.exist;\n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment not found.');                \n        expect(res.body).to.have.property('id_investment').to.eql(res.body.id_investment);\n        done(); \n    })",
              "err": {},
              "uuid": "2255b702-b8e5-4a7f-8b5d-45746134a309",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all stocks.",
              "fullTitle": "Stocks Route Get all stocks.",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/stocks')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('stocks').to.have.lengthOf(1);\n        expect(res.body.stocks[0]).to.have.property('id_stock');\n        expect(res.body.stocks[0]).to.have.property('stock_name'); \n        id_stock = res.body.stocks[0].id_stock;\n        done();\n    })",
              "err": {},
              "uuid": "c3165848-4a9f-43a1-8080-dd310fd3dfaa",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one stock.",
              "fullTitle": "Stocks Route Get one stock.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/stocks/${id_stock}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('stock');\n        expect(res.body.stock).to.have.property('id_stock').to.eql(id_stock);\n        expect(res.body.stock).to.have.property('stock_name').to.eql(defaultStock.stock_name);                \n        done();\n    })",
              "err": {},
              "uuid": "04b0f050-d8f8-49af-bd64-ce9d905a5d0f",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a stock.",
              "fullTitle": "Stocks Route Update a stock.",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let otherStock = {...defaultStock};\notherStock.stock_name = 'KNRI11';\nchai\n    .request(server)\n    .put(`/stocks/${id_stock}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send( otherStock )\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Stock updated.');\n        expect(res.body).to.have.property('stock');\n        expect(res.body.stock).to.have.property('id_stock');\n        expect(res.body.stock).to.have.property('stock_name').to.eql(otherStock.stock_name);\n        done();\n    })",
              "err": {},
              "uuid": "994488e5-5080-4983-ab91-899ecc928fef",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a stock.",
              "fullTitle": "Stocks Route Delete a stock.",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete(`/stocks/${id_stock}`)\n    .set(\"Authorization\", `Bearer ${token}`)            \n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Stock deleted.');\n        expect(res.body.stock).to.have.property('id_stock').to.eql(id_stock);                 \n        done(); \n    })",
              "err": {},
              "uuid": "a25bc0e7-b87e-451d-95a2-6a5e7b01741d",
              "parentUUID": "dd8f503b-bd71-49c1-b2ec-4ed61e24e6e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ac70496-310b-4176-a4d8-360633091c33",
            "2255b702-b8e5-4a7f-8b5d-45746134a309",
            "c3165848-4a9f-43a1-8080-dd310fd3dfaa",
            "04b0f050-d8f8-49af-bd64-ce9d905a5d0f",
            "994488e5-5080-4983-ab91-899ecc928fef",
            "a25bc0e7-b87e-451d-95a2-6a5e7b01741d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 67,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
          "title": "Users Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users Route\"",
              "fullTitle": "Users Route \"before all\" hook in \"Users Route\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "3ed8e6be-b4f1-435a-9289-009f0556383b",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Insert a user.",
              "fullTitle": "Users Route Insert a user.",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email,\n        password: faker.internet.password(8),\n        permission_level: 0\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User created.');\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');               \n        expect(res.body.user).to.have.property('email').to.eql(user_email);\n        expect(res.body.user).to.have.property('permission_level').to.eql(0);\n        done();\n    })",
              "err": {},
              "uuid": "1fb81fd0-5872-45ae-b3ce-19c2468dc13b",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Insert a duplicated user.",
              "fullTitle": "Users Route Insert a duplicated user.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: 'myinvest@server.com',\n        password: faker.internet.password(8),\n        permission_level: 0 \n    })\n    .end((err, res) => {     \n        expect(err).not.exist;           \n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Email already exists.'); \n        expect(res.body).to.have.property('email').to.eql('myinvest@server.com');                \n        done();\n    })",
              "err": {},
              "uuid": "81ff9cb6-d624-4f0f-86e7-527b4ab538ea",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all users.",
              "fullTitle": "Users Route Get all users.",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/users')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(2);\n        expect(res.body).to.have.property('users').to.have.lengthOf(2);\n        expect(res.body.users[1].user).to.have.property('id_user');\n        expect(res.body.users[1].user).to.have.property('email');\n        expect(res.body.users[1].user).to.have.property('permission_level');\n        user_email = res.body.users[1].user.email;\n        done();\n    })",
              "err": {},
              "uuid": "741b62c0-b5ce-4613-9b80-060e1b8fb8e8",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one user.",
              "fullTitle": "Users Route Get one user.",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/users/${user_email}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');\n        expect(res.body.user).to.have.property('email').to.eql(user_email);\n        expect(res.body.user).to.have.property('permission_level').to.eql(0);\n        done();\n    })",
              "err": {},
              "uuid": "209e9cf1-310d-4c7b-b1b9-2a1580d184a0",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a user password.",
              "fullTitle": "Users Route Update a user password.",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .put('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email,\n        password: faker.internet.password(8)                \n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User password updated.');\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');\n        expect(res.body.user).to.have.property('email').to.eql(user_email);                \n        done();\n    })",
              "err": {},
              "uuid": "6a5c2875-6f50-4734-a98d-b7d3ea13dab9",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a user.",
              "fullTitle": "Users Route Delete a user.",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email                              \n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User deleted.');\n        expect(res.body).to.have.property('user');                \n        expect(res.body.user).to.have.property('email').to.eql(user_email);                \n        done();\n    })",
              "err": {},
              "uuid": "df00f17a-bdcb-4e54-aeda-1e1204827ed3",
              "parentUUID": "a06b6e6b-78c1-40de-8839-9d06a366c23a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1fb81fd0-5872-45ae-b3ce-19c2468dc13b",
            "81ff9cb6-d624-4f0f-86e7-527b4ab538ea",
            "741b62c0-b5ce-4613-9b80-060e1b8fb8e8",
            "209e9cf1-310d-4c7b-b1b9-2a1580d184a0",
            "6a5c2875-6f50-4734-a98d-b7d3ea13dab9",
            "df00f17a-bdcb-4e54-aeda-1e1204827ed3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 175,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "myinvest-server-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "autoOpen": "true",
        "reportDir": "test-report",
        "reportFilename": "myinvest-server-test",
        "reportPageTitle": "My Invest Server API Test",
        "reportTitle": "My Invest Server API Test"
      },
      "version": "5.1.0"
    }
  }
}