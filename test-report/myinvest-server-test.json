{
  "stats": {
    "suites": 5,
    "tests": 23,
    "passes": 17,
    "pending": 0,
    "failures": 6,
    "start": "2021-02-09T22:09:38.006Z",
    "end": "2021-02-09T22:09:38.684Z",
    "duration": 678,
    "testsRegistered": 23,
    "passPercent": 73.91304347826086,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e127e406-5ca8-459c-99df-a7b7c21953fa",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "766e8cfd-db4e-4727-abf9-a4fc33fd0929",
          "title": "Init",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\init.js",
          "file": "\\test\\init.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check app status",
              "fullTitle": "Init check app status",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server).get('/').end((err, res) => { \n  expect(err).to.not.exist; \n  expect(res.status).to.equal(200); \n  done(); \n})",
              "err": {},
              "uuid": "bec1bbc7-f14a-4b17-bbfe-aaf0650610a8",
              "parentUUID": "766e8cfd-db4e-4727-abf9-a4fc33fd0929",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bec1bbc7-f14a-4b17-bbfe-aaf0650610a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
          "title": "Investments Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\investments.js",
          "file": "\\test\\investments.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Investments Route\"",
              "fullTitle": "Investments Route \"before all\" hook in \"Investments Route\"",
              "timedOut": false,
              "duration": 87,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "a385e570-b48e-4b4f-8568-7e6a4e197c37",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check Inserting a investment with future period.",
              "fullTitle": "Investments Route Check Inserting a investment with future period.",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodTomorrow\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(400);\n        expect(res.body).to.be.a('object');\n        expect(res.body.errors[0]).to.have.property('msg', 'Period must be iqual or less today.');                \n        done();\n    })",
              "err": {},
              "uuid": "68b102bb-f4c4-4f07-b412-9420500c1395",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Insert a investment.",
              "fullTitle": "Investments Route Insert a investment.",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment created.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday);\n        done();\n    })",
              "err": {},
              "uuid": "bf8d20b4-d0e7-4622-ad0d-24d3dcd77376",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check inserting a investment with duplicated period.",
              "fullTitle": "Investments Route Check inserting a investment with duplicated period.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Period already exists.');  \n        expect(res.body).to.have.property('period').to.eql(periodToday);              \n        done();\n    })",
              "err": {},
              "uuid": "e7050b63-0336-468b-a1b2-d02f32dd6de2",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all investments.",
              "fullTitle": "Investments Route Get all investments.",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/investments')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investments').to.have.lengthOf(1);\n        expect(res.body.investments[0]).to.have.property('id_investment');\n        expect(res.body.investments[0]).to.have.property('period'); \n        id_investment = res.body.investments[0].id_investment;\n        done();\n    })",
              "err": {},
              "uuid": "1b876c0c-adc3-4afb-84d3-78db2bba00c4",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one investment.",
              "fullTitle": "Investments Route Get one investment.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday+'T03:00:00.000Z');                \n        done();\n    })",
              "err": {},
              "uuid": "5bc00a30-41fe-476e-802c-714662ba53b0",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a investment.",
              "fullTitle": "Investments Route Update a investment.",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .put(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ period: periodYesterday })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment updated.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodYesterday);\n        done();\n    })",
              "err": {},
              "uuid": "37137414-2044-43e2-b363-6c94406aa113",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a investment.",
              "fullTitle": "Investments Route Delete a investment.",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)            \n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment deleted.');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);                 \n        done();\n    })",
              "err": {},
              "uuid": "6e59fea6-41b5-4399-9ab0-651405d6af70",
              "parentUUID": "4ab43a27-5da3-4fa3-a3a0-8a9cb43a0b94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68b102bb-f4c4-4f07-b412-9420500c1395",
            "bf8d20b4-d0e7-4622-ad0d-24d3dcd77376",
            "e7050b63-0336-468b-a1b2-d02f32dd6de2",
            "1b876c0c-adc3-4afb-84d3-78db2bba00c4",
            "5bc00a30-41fe-476e-802c-714662ba53b0",
            "37137414-2044-43e2-b363-6c94406aa113",
            "6e59fea6-41b5-4399-9ab0-651405d6af70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "c631ec3d-7d67-4605-b0b8-d64c70286229",
          "title": "Login Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\login.js",
          "file": "\\test\\login.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check login without parameter.",
              "fullTitle": "Login Route Check login without parameter.",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send({})\n    .end((err, res) => {\n        const bodyMsgs = res.body.errors.map((obj) => obj.msg);\n        const msgs = ['Email is required.',\n            'Invalid Email format (email@domain.com).',\n            'Password is required.',\n            'Password must have min 8 characters.'];\n        expect(res.status).to.equal(400);\n        expect(res.body).to.be.a('object');\n        expect(res.body.errors).to.have.lengthOf(4);\n        bodyMsgs.map((element, index) => {\n            expect(element).to.equal(`${msgs[index]}`);\n        });\n        done();\n    })",
              "err": {},
              "uuid": "56b19259-8ff7-452d-a56e-788ea13d5a56",
              "parentUUID": "c631ec3d-7d67-4605-b0b8-d64c70286229",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check login with wrong password.",
              "fullTitle": "Login Route Check login with wrong password.",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send({\n        email: default_user.email,\n        password: faker.internet.password(8)\n    })\n    .end((err, res) => {\n        expect(res.status).to.equal(401);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Authentication failed.');\n        done();\n    })",
              "err": {},
              "uuid": "99cf1dc7-07d9-43e9-8290-08c7c56f7fba",
              "parentUUID": "c631ec3d-7d67-4605-b0b8-d64c70286229",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check success login.",
              "fullTitle": "Login Route Check success login.",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/login')\n    .send( default_user )\n    .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(err).not.exist;\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Authentication success.');\n        expect(res.body).to.have.property('token');\n        done();\n    })",
              "err": {},
              "uuid": "7096031d-c7f5-4bcc-96ba-281719a6c145",
              "parentUUID": "c631ec3d-7d67-4605-b0b8-d64c70286229",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56b19259-8ff7-452d-a56e-788ea13d5a56",
            "99cf1dc7-07d9-43e9-8290-08c7c56f7fba",
            "7096031d-c7f5-4bcc-96ba-281719a6c145"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
          "title": "Stocks Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\stocks.js",
          "file": "\\test\\stocks.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stocks Route\"",
              "fullTitle": "Stocks Route \"before all\" hook in \"Stocks Route\"",
              "timedOut": false,
              "duration": 61,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "5559ddc6-a867-49b7-8d37-52244b91bcb7",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Insert a stock.",
              "fullTitle": "Stocks Route Insert a stock.",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/stocks/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment created.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday);\n        done();\n    })",
              "err": {
                "message": "ReferenceError: periodToday is not defined",
                "estack": "ReferenceError: periodToday is not defined\n    at Context.<anonymous> (test\\stocks.js:37:25)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "705b96dc-c2bd-440b-83ba-0f29d026518b",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check inserting a investment with duplicated period.",
              "fullTitle": "Stocks Route Check inserting a investment with duplicated period.",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/investments/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        period: periodToday\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Period already exists.');  \n        expect(res.body).to.have.property('period').to.eql(periodToday);              \n        done();\n    })",
              "err": {
                "message": "ReferenceError: periodToday is not defined",
                "estack": "ReferenceError: periodToday is not defined\n    at Context.<anonymous> (test\\stocks.js:56:25)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "90c97102-0db5-43c3-9379-903b4a310502",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all investments.",
              "fullTitle": "Stocks Route Get all investments.",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/investments')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investments').to.have.lengthOf(1);\n        expect(res.body.investments[0]).to.have.property('id_investment');\n        expect(res.body.investments[0]).to.have.property('period'); \n        id_investment = res.body.investments[0].id_investment;\n        done();\n    })",
              "err": {
                "message": "AssertionError: expected 0 to deeply equal 1",
                "estack": "AssertionError: expected 0 to deeply equal 1\n    at D:\\Desenvolvimento\\my-invest-server\\test\\stocks.js:77:65\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:716:12)\n    at D:\\Desenvolvimento\\my-invest-server\\node_modules\\superagent\\lib\\node\\index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:19:7)\n    at endReadableNT (_stream_readable.js:1327:12)\n    at processTicksAndRejections (internal/process/task_queues.js:80:21)",
                "diff": "- 0\n+ 1\n"
              },
              "uuid": "6c213771-f4fb-4bba-97d2-9ee8f16ee156",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one investment.",
              "fullTitle": "Stocks Route Get one investment.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);\n        expect(res.body.investment).to.have.property('period').to.eql(periodToday+'T03:00:00.000Z');                \n        done();\n    })",
              "err": {
                "message": "ReferenceError: id_investment is not defined",
                "estack": "ReferenceError: id_investment is not defined\n    at Context.<anonymous> (test\\stocks.js:88:34)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "0f6b4a18-cca2-462c-a08a-237626e0a4f2",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a investment.",
              "fullTitle": "Stocks Route Update a investment.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .put(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({ period: periodYesterday })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment updated.');\n        expect(res.body).to.have.property('investment');\n        expect(res.body.investment).to.have.property('id_investment');\n        expect(res.body.investment).to.have.property('period').to.eql(periodYesterday);\n        done();\n    })",
              "err": {
                "message": "ReferenceError: id_investment is not defined",
                "estack": "ReferenceError: id_investment is not defined\n    at Context.<anonymous> (test\\stocks.js:104:34)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "43a884bd-f2e8-472e-84e3-e16579170a20",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a investment.",
              "fullTitle": "Stocks Route Delete a investment.",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete(`/investments/${id_investment}`)\n    .set(\"Authorization\", `Bearer ${token}`)            \n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Investment deleted.');\n        expect(res.body.investment).to.have.property('id_investment').to.eql(id_investment);                 \n        done();\n    })",
              "err": {
                "message": "ReferenceError: id_investment is not defined",
                "estack": "ReferenceError: id_investment is not defined\n    at Context.<anonymous> (test\\stocks.js:121:37)\n    at processImmediate (internal/timers.js:461:21)",
                "diff": null
              },
              "uuid": "18a4f046-9f9e-4685-9698-ddfb11708a1b",
              "parentUUID": "a8c1f7cf-e65b-45cd-8158-12809fbc60ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "705b96dc-c2bd-440b-83ba-0f29d026518b",
            "90c97102-0db5-43c3-9379-903b4a310502",
            "6c213771-f4fb-4bba-97d2-9ee8f16ee156",
            "0f6b4a18-cca2-462c-a08a-237626e0a4f2",
            "43a884bd-f2e8-472e-84e3-e16579170a20",
            "18a4f046-9f9e-4685-9698-ddfb11708a1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        },
        {
          "uuid": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
          "title": "Users Route",
          "fullFile": "D:\\Desenvolvimento\\my-invest-server\\test\\users.js",
          "file": "\\test\\users.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Users Route\"",
              "fullTitle": "Users Route \"before all\" hook in \"Users Route\"",
              "timedOut": false,
              "duration": 63,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post(\"/login\")\n    .send(tokenUser)\n    .end((err, res) => {\n        token = res.body.token;\n        expect(res).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "86315373-2a29-4c4a-91f9-9a42571ce075",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Insert a user.",
              "fullTitle": "Users Route Insert a user.",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email,\n        password: faker.internet.password(8),\n        permission_level: 0\n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(201);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User created.');\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');               \n        expect(res.body.user).to.have.property('email').to.eql(user_email);\n        expect(res.body.user).to.have.property('permission_level').to.eql(0);\n        done();\n    })",
              "err": {},
              "uuid": "dba746f1-779b-41d1-bda2-26b502db1e1c",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Insert a duplicated user.",
              "fullTitle": "Users Route Insert a duplicated user.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .post('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: 'myinvest@server.com',\n        password: faker.internet.password(8),\n        permission_level: 0 \n    })\n    .end((err, res) => {     \n        expect(err).not.exist;           \n        expect(res.status).to.equal(409);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'Email already exists.'); \n        expect(res.body).to.have.property('email').to.eql('myinvest@server.com');                \n        done();\n    })",
              "err": {},
              "uuid": "8d3b803a-020e-45b6-bff9-b38a20870318",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all users.",
              "fullTitle": "Users Route Get all users.",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get('/users')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(2);\n        expect(res.body).to.have.property('users').to.have.lengthOf(2);\n        expect(res.body.users[1].user).to.have.property('id_user');\n        expect(res.body.users[1].user).to.have.property('email');\n        expect(res.body.users[1].user).to.have.property('permission_level');\n        user_email = res.body.users[1].user.email;\n        done();\n    })",
              "err": {},
              "uuid": "89b08993-6478-4d1c-9f10-6bf25cc06dd3",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get one user.",
              "fullTitle": "Users Route Get one user.",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .get(`/users/${user_email}`)\n    .set(\"Authorization\", `Bearer ${token}`)\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('records').to.eql(1);\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');\n        expect(res.body.user).to.have.property('email').to.eql(user_email);\n        expect(res.body.user).to.have.property('permission_level').to.eql(0);\n        done();\n    })",
              "err": {},
              "uuid": "280e9ae0-ca8f-496e-8a74-0296a95cf612",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update a user password.",
              "fullTitle": "Users Route Update a user password.",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .put('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email,\n        password: faker.internet.password(8)                \n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User password updated.');\n        expect(res.body).to.have.property('user');\n        expect(res.body.user).to.have.property('id_user');\n        expect(res.body.user).to.have.property('email').to.eql(user_email);                \n        done();\n    })",
              "err": {},
              "uuid": "ae2af196-fdd1-4e50-8ae6-93511561b009",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a user.",
              "fullTitle": "Users Route Delete a user.",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(server)\n    .delete('/users/')\n    .set(\"Authorization\", `Bearer ${token}`)\n    .send({\n        email: user_email                              \n    })\n    .end((err, res) => {\n        expect(err).not.exist;\n        expect(res.status).to.equal(202);\n        expect(res.body).to.be.a('object');\n        expect(res.body).to.have.property('msg', 'User deleted.');\n        expect(res.body).to.have.property('user');                \n        expect(res.body.user).to.have.property('email').to.eql(user_email);                \n        done();\n    })",
              "err": {},
              "uuid": "8b5eb237-a930-4f08-9109-8d35f84c8e1d",
              "parentUUID": "29784b3c-89fc-4954-a37f-cf6be0c479aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dba746f1-779b-41d1-bda2-26b502db1e1c",
            "8d3b803a-020e-45b6-bff9-b38a20870318",
            "89b08993-6478-4d1c-9f10-6bf25cc06dd3",
            "280e9ae0-ca8f-496e-8a74-0296a95cf612",
            "ae2af196-fdd1-4e50-8ae6-93511561b009",
            "8b5eb237-a930-4f08-9109-8d35f84c8e1d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "myinvest-server-test",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "autoOpen": "true",
        "reportDir": "test-report",
        "reportFilename": "myinvest-server-test",
        "reportPageTitle": "My Invest Server API Test",
        "reportTitle": "My Invest Server API Test"
      },
      "version": "5.1.0"
    }
  }
}